#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

/*
 * Complete the 'isValid' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

/*
 * To return the string from the function, you should either do static allocation or dynamic allocation
 *
 * For example,
 * char* return_string_using_static_allocation() {
 *     static char s[] = "static allocation of string";
 *
 *     return s;
 * }
 *
 * char* return_string_using_dynamic_allocation() {
 *     char* s = malloc(100 * sizeof(char));
 *
 *     s = "dynamic allocation of string";
 *
 *     return s;
 * }
 *
 */
char* isValid(char* s) {
    int c[26]={0};
    int size=strlen(s);
    for(int i=0;i<size;i++)
        c[s[i]-'a']++;
    int frequency[size],freq_size=0;
    for(int j=0;j<26;j++){
        if(c[j]>0)
            frequency[freq_size++]=c[j];
    }
    int mini=frequency[0];
    int maxi=frequency[0];
    for(int k=0;k<freq_size;k++){
        if(frequency[k]<mini)
            mini=frequency[k];
        if(frequency[k]>maxi)
            maxi=frequency[k];
    }
    int mini_count=0;
    int maxi_count=0;
    for(int l=0;l<freq_size;l++){
        if(frequency[l]==mini)
            mini_count++;
        if(frequency[l]==maxi)
            maxi_count++;
    }
    if(mini==maxi)
        return "YES";
    if(mini==1&&mini_count==1&&mini_count+maxi_count==freq_size)
        return "YES";
    if(mini_count+maxi_count==freq_size&&maxi-mini==1&&maxi_count==1)
        return "YES";
    return "NO";
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* s = readline();

    char* result = isValid(s);

    fprintf(fptr, "%s\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}
